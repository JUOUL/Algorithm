Description

给定一递增有序数组a[0,1,...,n-1], 请在数组中搜索给定元素. 搜索过程中请使用mid=(low+high)/2.

Input

第一行输入M表示包含M组测试数据，每组输入N和X, N (1000<=N<=20000) 表示后面有N个整数递增有序数组, 表示将搜索的元素.

Output

搜索成功输出success及父亲, 否则输出not found及父亲.

Sample Input

2
7 10 1 3 5 7 9 11 13
7 10 2 4 6 8 10 12 14

Sample Output

not found, father is 9
success, father is 12

*请注意逗号后加空格

#include<iostream>
#include<string.h>
#include<vector>
using namespace std;
vector<int>ans;
vector<int>judge;
int temp = 0;
int binarySearch(int list[], int key, int arraySize)
{
	int low = 0;
	int high = arraySize - 1;
	int mid;
	temp = list[0];
	while (high >= low)
	{
		mid = (low + high) / 2;
		if (key < list[mid])
		{
			temp = list[mid];
			high = mid - 1;
		}
		else if (key == list[mid])
		{
			ans.push_back(temp);
			return 0;
		}
		else
		{
			temp = list[mid];
			low = mid + 1;
		}
	}
	ans.push_back(list[mid]);
	return  -1;
}

int main()
{
	int m;
	cin >> m;
	for (int i = m; i > 0; i--)
	{
		int length;
		int key;
		cin >> length;
		cin >> key;
		int* arr=new int[length];
		memset(arr, 0, length);
		for (int i = 0; i < length; i++)
		{
			int val;
			cin >> val;
			arr[i] = val;
		}
		judge.push_back(binarySearch(arr, key, length));
		delete[]arr;
	}
	for (int i = 0; i <m; i++)
	{
		if (judge[i] == -1)
		{
			cout << "not found, father is " << ans[i] << endl;
		}
		else
		{
			cout << "success, father is " << ans[i] << endl;
		}
	}
	return 0;
}
