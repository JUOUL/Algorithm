设有一个长度为N的数字串，要求选手使用K个乘号将它分成K+1个部分，找出一种分法，使得这K+1个部分的乘积能够为最大。
同时，为了帮助选手能够正确理解题意，主持人还举了如下的一个例子：
有一个数字串：312， 当N=3，K=1时会有以下两种分法：

1)  3*12=36
2)  31*2=62
   
这时，符合题目要求的结果是：31*2=62
现在，请你帮助你的好朋友XZ设计一个程序，求得正确的答案。


#include <iostream>
using namespace std;
int StringToNum(char* str, int i, int j)
{
    int value = 0;
    for (int k = i; k <= j; k++)
    {
        value = value * 10 + (str[k] - '0');
        cout << "value is " << value << '\n';
    }
    return value;
}

int main()
{
    int num = 0;
    int K = 0;
    cin >> num;
    cin >> K;
    char* str = new char[num];
    int** nums = new int* [num];
    int** mul = new int* [num];
    for (int i = 0; i < num; i++)
    {
        mul[i] = new int[K + 1];
        mul[i] = { 0 };
    }
    for (int i = 0; i < num; i++)
    {
        nums[i] = new int[num];
        nums[i] = { 0 };
    }


    cin >> str;
    cout << str;
    for (int i = 0; i < num; i++)
    {
        cout << 'i' << i << '\n';
        for (int j = i; j < num; j++)
        {
            cout << 'j' << j << '\n';
            nums[i][j] = StringToNum(str, i, j);
            cout << nums[i][j] << '\n';
        }
    }

    for (int i = 0; i < num; i++)
    {
        mul[i][0] = nums[0][i];
    }


    cout << '1';
    for (int j = 1; j <= K; j++)
    {
        for (int i = j + 1; i < num; i++)
        {
            for (int k = j; k < i; k++)
            {
                mul[i][j] = max(mul[k][j - 1] * nums[k + 1][i], mul[i][j]);
            }
        }
    }

    cout << '\n' << mul[num - 1][K];
    for (int i = 0; i < num; i++)
    {
        delete[] nums[i];
        delete[] mul[i];
    }
    delete[] nums;
    delete[] mul;
    delete[] str;
    return 0;
}


mul[i][j]=max(mul[k][j-1]*nums[k+1][i],mul[i][j])；
知道了j-1个乘号的最大值，对j个时，就不断将乘号从左到右找位置放，留最大值。
