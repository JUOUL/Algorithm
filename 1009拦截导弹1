Description

某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹
能够到达任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系
统还在试用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。

Input

第一行输入M表示包含M组测试数据，每组第一个输入N (N<100)表示后面有N个整数，表示导弹依次飞来的高度(雷达给
出的高度数据是不大于30000的正整数)。

Output

对于每组输入数据，第一行输出这套系统最多能拦截多少导弹。

Sample Input

2
7 300 250 275 252 200 138 245
7 181 205 471 782 1033 1058 1111

Sample Output

5
1

#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<string.h>
#include<vector>
using namespace std;
 
vector<int>ans;
const int N = 1010;
int n;
int q[N];
int f[N], g[N];
void daodan()
{
	int res = 0;
	for (int i = 0; i < n; i++) 
	{
		f[i] = 1;
		for (int j = 0; j < i; j++)
			if (q[j] >= q[i])
				f[i] = max(f[i], f[j] + 1);
		res = max(res, f[i]);
	}
	ans.push_back(res);

	int cnt = 0;
	for (int i = 0; i < n; i++) {
		int k = 0;
		while (k < cnt && g[k] > q[i])   k++;
		g[k] = q[i];
		if (k >= cnt) cnt++;
	}
	ans.push_back(cnt);
}
int main() {
	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		n = 0;
		memset(q, 0, sizeof(q));
		memset(f, 0, sizeof(f));
		memset(g, 0, sizeof(g));
		int num;
		cin >> num;
		for (int i = 0; i < num; i++)
		{
			int height;
			cin >> height;
			q[i] = height;
            n++;
		}
		daodan();
	}
	for (int i = 0; i < 2*t; i++)
	{
		cout << ans[i]<<" "<<ans[i+1]<<endl;
		i++;
	}
    return 0;
}

需要几套导弹实际就是计算最长上升子序列。
这个代码使用了一种算法来计算最长上升子序列（Longest Increasing Subsequence，简称 LIS）的长度。具体来说，该算法使用了动态规划的思想，时间复杂度为 O(n log n)。
在这个算法中，我们使用一个数组 g 来保存当前已经找到的所有 LIS 的结尾元素，以及一个计数器 cnt 来记录已经找到的 LIS 的数量。从左到右遍历原始序列 q，对于每个元素 q[i]，我们在数组 g 中二分查找它应该插入的位置 k，并将 g[k] 更新为 q[i]。如果 k >= cnt，则说明 q[i] 可以加入一个新的 LIS，因此需要将 cnt 加 1。
