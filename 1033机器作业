Description
有n个作业需要在一台机器上执行，一个时刻机器上只能执行一个作业，每个作业可在单位时间内完成，作业i有截止时间di，当作业i在截止时间被执行完，则可获得pi的收益。求最大收益。


Input

第一行输入T(T<=10)表示有T组数据。每组数据先输入一个正整数N(1<=N<=50000)，表示共有N个作业，随后输入N组(di,pi)，表示每个作业的截止时间和收益。

Output

输出T行正整数，第i行表示第i组数据下能获得的最大收益。

Sample Input

3
1
4 10
4
1 5
1 6
2 3
3 10
4
2 5
2 6
3 3
3 10

Sample Output

10
19
21

#include<iostream>
#include<vector>
using namespace std;

void QuickSort(long long*, long long*, int, int);
void Swap(long long&, long long&);
bool isOK(int);

int* t;

int main()
{
    vector<int>ans;
    int m, n;
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        int x, max = 0;
        long long mon = 0;
        cin >> n;
        long long* d = new long long[n], * p = new long long[n];
        for (x = 0; x < n; x++)
        {
            cin >> d[x] >> p[x];
            if ((int)d[x] > max)
                max = (int)d[x]; //截止时间di
        }
        QuickSort(p, d, 0, n - 1);	//按照作业利益pi大小从小到大排列
        t = new int[max + 1];
        for (x = 0; x < max + 1; x++)
            t[x] = 0;
        for (int k = n - 1; k >= 0; k--)	//N个作业
        {
            if (isOK((int)d[k]))
                mon += p[k];
        }
        ans.push_back(mon);
    }
    for (int i = 0; i < m; i++)
    {
        cout << ans[i] << endl;
    }
    return 0;
}

bool isOK(int d)
{
    for (int i = d; i >= 1; i--)
        if (t[i] == 0) { t[i] = 1; return true; }
    return false;
}

void QuickSort(long long* a, long long* b, int x, int y)
{
    if (x >= y) return;
    int pivot = a[x], pivotpos = x;
    for (int i = x; i <= y; i++)
    {
        if (a[i] < pivot)
        {
            pivotpos++;
            if (pivotpos != i)			//小于基准的交换到左侧
            {
                Swap(a[pivotpos], a[i]);
                Swap(b[pivotpos], b[i]);
            }
        }
    }
    Swap(a[x], a[pivotpos]);
    Swap(b[x], b[pivotpos]);
    QuickSort(a, b, x, pivotpos - 1);
    QuickSort(a, b, pivotpos + 1, y);
}

void Swap(long long& x, long long& y)
{
    long long temp = x;
    x = y;
    y = temp;
}
