1029
Description

给定n(n<=500)个顶点,以及E(E<=20000)条边，计算最小生成树的权值.

Input

第一行输入T表示有T组数据。每组数据第一行输入n、E，分别表示顶点数和边数. 接下来
输入E行每行三个正整数u(1<=u<=n)、v(1<=v<=n)、w，表示顶点u到顶点v之间无向边
长度w（可能有重边）。

Output

输出T行正整数，第i行表示第i组数据的最小生成树权值, 若不能构建最小生成树输出-1。

Sample Input

3
2 2
1 2 1
1 2 2
3 1
2 3 1
3 3
1 2 2
1 2 3
2 3 1

Sample Output

1
-1
3


#include<iostream>
#include<stdlib.h>
#include<string.h> 
using namespace std;

typedef struct node
{
    int u, v, w;
}Sj;

Sj f[20000];
int q[500];

int cmp(const void* a, const void* b)
{
    Sj* aa = (Sj*)a;
    Sj* bb = (Sj*)b;
    return aa->w > bb->w ? 1 : -1;
}

int cz(int i)
{
    int c = i;
    for (; q[c] >= 0; c = q[c]);
    while (c != i)
    {
        int t = q[i];
        q[i] = c;
        i = t;
    }
    return c;
}

void jh(int a, int b)
{
    int f1 = cz(a);
    int f2 = cz(b);
    int t = q[f1] + q[f2];
    if (q[f1] > q[f2])
    {
        q[f1] = f2;
        q[f2] = t;
    }
    else
    {
        q[f2] = f1;
        q[f1] = t;
    }
}

int solve()
{
    int n, m;
    cin >> n >> m;
    for (int i = 0; i < m; i++)
        cin >> f[i].u >> f[i].v >> f[i].w;

    qsort(f, m, sizeof(f[0]), cmp);
    memset(q, -1, sizeof(q));

    int ans = 0;
    int c = 0;
    for (int i = 0; i < m; i++)
    {
        int u = f[i].u;
        int v = f[i].v;
        if (cz(u) != cz(v))
        {
            c++;
            ans += f[i].w;
            jh(u, v);
        }
    }
    if (c == n - 1)
        cout << ans << endl;
    else
        cout << "-1" << endl;
}

int main()
{
    int m;
    cin >> m;
    for (int i = 0; i < m; i++)
    {
        solve();
    }
    return 0;
}
