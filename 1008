Description

某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截系统有一个缺陷：虽然它的第一发炮弹能够到达任意的高度，
但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试用阶段，所以只有一套系统，因此
有可能不能拦截所有的导弹。

Input

第一行输入M表示包含M组测试数据，每组第一个输入N (N<100)表示后面有N个整数，表示导弹依次飞来的高度(雷达给出的高度数据是
不大于30000的正整数)。

Output

对于每组输入数据，第一行输出这套系统最多能拦截多少导弹，以及输出如果要拦截所有导弹最少要配备多少套这种导弹拦截系统。

Sample Input

2
7 300 250 275 252 200 138 245
7 181 205 471 782 1033 1058 1111

Sample Output

5 2
1 7

#include<iostream>
#include<cstdio>
#include<cstring>
#include<algorithm>
#include<string.h>
#include<vector>
using namespace std;

vector<int>ans;
const int N = 1010;
int n;
int q[N];
int f[N], g[N];
void daodan()
{
	int res = 0;
	for (int i = 0; i < n; i++) {
		f[i] = 1;
		for (int j = 0; j < i; j++)
			if (q[j] >= q[i])
				f[i] = max(f[i], f[j] + 1);
		res = max(res, f[i]);
	}
	ans.push_back(res);
}
int main() {
	int t;
	cin >> t;
	for (int i = 0; i < t; i++)
	{
		n = 0;
		memset(q, 0, sizeof(q));
		memset(f, 0, sizeof(f));
		memset(g, 0, sizeof(g));
		int num;
		cin >> num;
		for (int i = 0; i < num; i++)
		{
			int height;
			cin >> height;
			q[i] = height;
			n++;
		}
		daodan();
	}
	for (int i = 0; i < t; i++)
	{
		cout << ans[i] << endl;
	}
	return 0;
}

基于动态规划的最长下降子序列，f[i]表示最长的长度，想要知道f[i]就要知道之前的每一个f[j],如果q[i]<q[j],则f[i]=f[j]+1直到最大的。
