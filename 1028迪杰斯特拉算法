Description

给定n(n<=500)个顶点,以及E(E<=10000)条边，使用迪杰斯特拉算法计算顶点s到顶点t的最短路径.

Input

第一行输入T表示有T组数据。每组数据第一行输入n、E、s、t，分别表示顶点数、边数、顶点s以及顶点t. 接下来
输入E行每行三个正整数u(1<=u<=n)、v(1<=v<=n)、w，表示顶点u到顶点v之间无向边长度w（可能有重边）。

Output

输出T行正整数，第i行表示第i组数据s到达t的最短路径长度。若s无法到达t国，输出-1.

Sample Input

3
2 2 1 2
1 2 1
1 2 2
3 1 1 3
2 3 1
3 3 1 3
1 2 1
1 2 3
2 3 1

Sample Output

1
-1
2


#include <iostream>
#include <vector>
#include <queue>
#include<string.h>
using namespace std;

const int MAXN = 505;
const int INF = 0x3f3f3f3f;

struct Edge {
    int to, weight;
};

vector<Edge> G[MAXN];
int dist[MAXN];
bool visited[MAXN];

void dijkstra(int s) {
    memset(dist, INF, sizeof(dist));
    memset(visited, false, sizeof(visited));
    dist[s] = 0;
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(dist[s], s));
    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();
        if (visited[u]) continue;
        visited[u] = true;
        for (int i = 0; i < G[u].size(); i++) {
            int v = G[u][i].to;
            int weight = G[u][i].weight;
            if (!visited[v] && dist[u] + weight < dist[v]) {
                dist[v] = dist[u] + weight;
                pq.push(make_pair(dist[v], v));
            }
        }
    }
}

int main() {
    vector<int>answer;
    int T;
    cin >> T;
    for(int i=0;i<T;i++)
    {
        int n, m, s, t;
        cin >> n >> m >> s >> t;
        for (int i = 1; i <= n; i++) {
            G[i].clear();
        }
        for (int i = 1; i <= m; i++) {
            int u, v, w;
            cin >> u >> v >> w;
            G[u].push_back(Edge{ v, w });
            G[v].push_back(Edge{ u, w });
        }
        dijkstra(s);
        if (dist[t] == INF) {
            answer.push_back(-1);
        }
        else {
            answer.push_back(dist[t]);
        }
    }
    for (int i = 0; i < T; i++) {
        cout << answer[i] << endl;
    }
    return 0;
}
