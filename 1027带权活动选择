Description

给定n个活动，活动ai表示为一个三元组(si,fi,vi)，其中si表示活动开始时间，fi表示活动的结束时间，vi表示活动的权重,
si<fi。带权活动选择问题是选择一些活动，使得任意被选择的两个活动ai和aj执行时间互不相交，即区间[si,fi)与[sj,fj)
互不重叠，并且被选择的活动的权重和最大。请设计一种方法求解带权活动选择问题。


Input

第一行输入M(M<=10)表示有M组数据。每组数据输入整数N(N<=10000), 接下来输入N个活动。

Output

输出M行正整数，第i行表示第i组数据的能够选择活动最大权值和。

Sample Input

2
5
7 9 9
7 8 1
6 7 9
6 8 5
4 9 9
5
4 7 9
3 4 4
7 8 8
8 9 6
4 5 9

Sample Output

18
27


#include<iostream>
#include<vector>
using namespace std;


struct activity {
	int x;
	int y;
	int value;
};

void SortByEndtime(activity a[], int start, int end) {
	if (start >= end)  return;
	activity ac_base = a[start];
	int base = a[start].y;
	int i = start;
	int j = end;
	activity temp;
	while (i < j) {
		while (a[j].y >= base && i < j) j--;
		while (a[i].y <= base && i < j) i++;
		if (i < j)
		{
			temp = a[i];
			a[i] = a[j];
			a[j] = temp;
		}

	}
	a[start] = a[i];
	a[i] = ac_base;
	SortByEndtime(a, start, i - 1);
	SortByEndtime(a, i + 1, end);
}

int noco(activity a[], int i) {   
	if (i <= 1)
		return 0;
	int i_start_time = a[i].x;
	for (int j = i - 1; j >= 1; j--) {
		if (a[j].y <= i_start_time)
			return j;
	}
	return 0;
}

int max(int a, int b) {
	return a > b ? a : b;
}


int main()
{
	vector<int>ans;
	int M;
	cin >> M;
	for (int iii = 0; iii < M; iii++) {
		int N;
		cin >> N;
		activity* a;
		a = new activity[N + 1];
		for (int j = 1; j < N + 1; j++) {
			cin >> a[j].x >> a[j].y >> a[j].value;
		}
		SortByEndtime(a, 1, N);   
		int* f;
		f = new int[N + 1];      
		f[0] = 0;
		f[1] = a[1].value;
		for (int i = 2; i < N + 1; i++) {
			f[i] = max(f[i - 1], a[i].value + f[noco(a, i)]); 
		}

		ans.push_back(f[N]);

	}
	for (int iii = 0; iii < M; iii++) {
		cout << ans[iii] << endl;
	}


}
