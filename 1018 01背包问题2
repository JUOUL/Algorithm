1018
Description

有一个容量为C(C<=100)的奇怪背包，这个背包可以被带走仅当它恰好被装满。现在你手边
有N(N<=500)颗宝石，第i颗宝石大小为si，价值为vi。由于条件限制，你手边只有这个奇
怪的背包可作为你搬运宝石的唯一工具。现在你想知道在这样的条件下你最多可以带走多大
利润的宝石。

Input

第一行输入M(M<=10)表示有M组数据。每组数据第一行输入N、C，表示宝石数目以及背包容
量；接下来一行输入N组(si,vi), si和vi均为整数，表示每颗宝石的大小和价值。

Output

输出M行正整数，第i行表示第i组数据可以带走的宝石的最大代价, 背包可被带走仅当它恰好被装满。

Sample Input

3
3 10
1 3 2 5 7 2
3 10
1 3 2 5 6 2
5 10
5 6 5 7 2 8 8 1 5 9

Sample Output

10
0
16

#include <iostream>
#include<string.h>
#include<vector>
#include<algorithm>
using namespace std;
struct diamond
{
    diamond(int size, int value)
    {
        s = size;
        v = value;
    }
    int s;
    int v;
};

int MaxValue(int n, int c, vector<diamond>bag)
{
    int** dp = new int* [n];
    for (int i = 0; i < n; ++i) {
        dp[i] = new int[c + 1];
        dp[i][0] = 0;
    }
    for (int j = 1; j < c + 1; ++j) {
        dp[0][j] = (bag[0].s == j) ? bag[0].v: 0;
    }
    for (int i = 1; i < n; ++i) {
        for (int j = 1; j < c + 1; ++j) {
            if (bag[i].s < j) {
                if (dp[i - 1][j - bag[i].s] == 0) {
                    dp[i][j] = dp[i - 1][j];
                }
                else {
                    dp[i][j] = max(bag[i].v + dp[i - 1][j - bag[i].s], dp[i - 1][j]);
                }
            }
            else if (bag[i].s == j) {
                dp[i][j] = max(bag[i].v, dp[i - 1][j]);
            }
            else {
                dp[i][j] = dp[i - 1][j];
            }
        }
    }
    return dp[n - 1][c];
}
int main()
{
    vector<int>ans;
    int num = 0;
    cin >> num;
    int N;
    int C;
    for (int i = 0; i < num; i++)
    {
        cin >> N;
        cin >> C;
        vector<diamond>bag;
        for (int i = 0; i < N; i++)
        {
            int size;
            int value;
            cin >> size;
            cin >> value;

            diamond temp(size, value);
            bag.push_back(temp);
        }
        ans.push_back(MaxValue(N, C, bag));
    }
    for (int i = 0; i < num; i++)
    {
        cout << ans[i] << endl;
    }
    return 0;
}
