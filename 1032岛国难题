Description

小A是一个著名的桥梁工程师，然而这次小A接到了一个棘手的工程。J国是一个岛国，共由n座岛屿
构成，这些岛屿通过n-1座桥梁互相连为一国，因此J国所有岛屿构成了一个树形结构。不幸的是，
由于常年遭到海浪侵蚀，J国的每座桥梁均出现了一定程度的破损，每座桥梁有一定的概率Pi会坍塌
，从而使得J国分裂为若干个部分。现在J国邀请小A帮忙修缮这些桥梁，他们提供给了小A这n-1座
桥梁可能坍塌的概率Pi。为了对工程量做一个简单评估，小A需要计算出J国可能分裂为多少个部分
的期望值。然而要命的是，J国忘记了提供J国的地图，然而时间已经不允许小A再向J国要地图，因
此他认为J国n座岛屿可能的连接方式都是等概率的。显然这难倒了小A，因此他请你帮他计算在这样
的条件下J国期望分裂为多少部分。

Input

第一行输入T(T<=10)表示有T组数据。每组数据先输入一个正整数N(1<=N<=1000)，表示J国的岛屿
数目；然后紧跟着输入n-1个正整数Pi(0<=Pi<=100)，表示每座桥梁有Pi%的概率坍塌。

Output

输出T行正整数，第i行表示第i组数据下J国可能分裂多少个部分的期望值，保留6位小数。

Sample Input

3
2 50
3 30 50
4 20 30 45

Sample Output

1.500000
1.800000
1.950000



#include<iostream>
#include<vector>
#include<string.h>
#include<iomanip>
using namespace std;
double countries(vector<double>table, int n)
{
	double** dp = new double* [n + 1];
	for (int i = 0; i <= n + 1; i++)
	{
		dp[i] = new double[n + 2];
	}
	for (int j = 0; j <= n + 2; j++)
	{
		for (int i = 0; i <= n + 1; i++)
		{
			dp[i][j] = 0;
		}
	}
	dp[0][1] = 1;
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= i + 1; j++)
		{
			dp[i][j] = dp[i - 1][j] * (1 - table[i]) + dp[i - 1][j - 1] * table[i];
		}
	}
	double ans = 0;
	for (int i = 1; i <= n + 1; i++)
	{
		ans += dp[n][i] * i;
	}
	return ans;
}
int main()
{
	int t;
	cin >> t;
	vector<double>ans;
	for (int i = 0; i < t; i++)
	{
		vector<double>table;
		int n;
		double p;
		cin >> n;
		table.push_back(0);
		for (int j = 1; j < n; j++)
		{
			cin >> p;
			table.push_back(p / 100);
		}
		ans.push_back(countries(table, n - 1));
	}
	for (int i = 0; i < t; i++)
	{
		cout << fixed << setprecision(6) << ans[i] << endl;
	}
	return 0;
}
